# config.py
"""
================================================================================
B·∫¢NG ƒêI·ªÄU KHI·ªÇN TRUNG T√ÇM - FILE C·∫§U H√åNH V√Ä H·∫∞NG S·ªê
================================================================================
File n√†y ch·ª©a t·∫•t c·∫£ c√°c gi√° tr·ªã c·∫•u h√¨nh, ƒë∆∞·ªùng d·∫´n, v√† c√°c h·∫±ng s·ªë m·∫∑c ƒë·ªãnh 
cho to√†n b·ªô ·ª©ng d·ª•ng Ph√¢n T√≠ch H√†nh Vi Ng∆∞·ªùi D√πng (UBA).
Vi·ªác t·∫≠p trung t·∫•t c·∫£ c√°c gi√° tr·ªã n√†y v√†o m·ªôt n∆°i gi√∫p d·ªÖ d√†ng qu·∫£n l√Ω v√† thay ƒë·ªïi.
"""

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
from datetime import time as dt_time
import os
from dotenv import load_dotenv

# ==============================================================================
# I. C·∫§U H√åNH BI·∫æN M√îI TR∆Ø·ªúNG (ENVIRONMENT VARIABLES)
# ==============================================================================
# L·ªánh n√†y s·∫Ω t√¨m v√† t·∫£i c√°c bi·∫øn t·ª´ m·ªôt file c√≥ t√™n l√† `.env` trong th∆∞ m·ª•c g·ªëc.
# `override=True` ƒë·∫£m b·∫£o r·∫±ng gi√° tr·ªã trong file `.env` s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n.
load_dotenv(override=True)

# ==============================================================================
# II. C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N V√Ä FILE
# ==============================================================================
# M·ª•c n√†y ƒë·ªãnh nghƒ©a t·∫•t c·∫£ c√°c ƒë∆∞·ªùng d·∫´n file m√† ·ª©ng d·ª•ng s·ª≠ d·ª•ng.

# --- ƒê∆∞·ªùng d·∫´n cho qu√° tr√¨nh Ph√¢n t√≠ch Log (Parsing) ---

# L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c g·ªëc c·ªßa project m·ªôt c√°ch t·ª± ƒë·ªông.
# ƒêi·ªÅu n√†y gi√∫p project c√≥ th·ªÉ ch·∫°y tr√™n b·∫•t k·ª≥ m√°y n√†o m√† kh√¥ng c·∫ßn s·ª≠a ƒë∆∞·ªùng d·∫´n.
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# --- C√ÅC ƒê∆Ø·ªúNG D·∫™N ƒê∆Ø·ª¢C T√çNH TO√ÅN D·ª∞A TR√äN TH∆Ø M·ª§C G·ªêC ---
DATA_DIR = os.path.join(PROJECT_ROOT, "data")
LOGS_DIR = os.path.join(PROJECT_ROOT, "logs")
ENGINE_DIR = os.path.join(PROJECT_ROOT, "engine")


DATABASE_URL = f"sqlite:///{os.path.join(DATA_DIR, 'app_database.db')}"

# ƒê∆∞·ªùng d·∫´n ƒê·∫¶Y ƒê·ª¶ ƒë·∫øn file log th√¥ c·ªßa MySQL (v√≠ d·ª•: general_log).
# ƒê√¢y l√† file ƒê·∫¶U V√ÄO cho script `log_parser.py`.
# !! B·∫†N C·∫¶N S·ª¨A ƒê∆Ø·ªúNG D·∫™N N√ÄY CHO ƒê√öNG V·ªöI M√ÅY C·ª¶A B·∫†N TRONG SCRIPT PARSER !!
# `r""` (raw string) ƒë∆∞·ª£c d√πng ƒë·ªÉ tr√°nh c√°c l·ªói li√™n quan ƒë·∫øn d·∫•u `\` tr√™n Windows.
SOURCE_MYSQL_LOG_PATH = r"C:/mysql_logs/query.log"

SOURCE_POSTGRES_LOG_PATH = r'C:/psql_logs'

# ------ Posstgresql log config ----------
PARSED_POSTGRES_LOG_FILE_PATH = os.path.join(LOGS_DIR, "parsed_postgres_logs.csv")

POSTGRES_PARSER_SCRIPT_PATH = os.path.join(ENGINE_DIR, "postgres_log_parser.py")

POSTGRES_STATE_FILE_PATH = os.path.join(LOGS_DIR, ".postgres_parser_state.json")

# ------ MongoDB log config --------
SOURCE_MONGO_LOG_PATH = r"C:/mongo_logs"
PARSED_MONGO_LOG_FILE_PATH = os.path.join(LOGS_DIR, "parsed_mongodb_logs.csv")
MONGO_PARSER_SCRIPT_PATH = os.path.join(ENGINE_DIR, "mongodb_log_parser.py")

# ------ MySQL log config ---------

# T√™n file CSV s·∫Ω ƒë∆∞·ª£c t·∫°o ra sau khi `log_parser.py` ch·∫°y.
PARSED_MYSQL_LOG_FILE_PATH = os.path.join(LOGS_DIR, "parsed_mysql_logs.csv")

# Th∆∞ m·ª•c ƒë·ªÉ l∆∞u tr·ªØ c√°c file log ƒë√£ ph√¢n t√≠ch b·ªã kh√¥ng ƒë·ªìng b·ªô
MYSQL_MISMATCH_ARCHIVE_DIR = os.path.join(LOGS_DIR, "mismatch")

# T√™n file script th·ª±c hi·ªán vi·ªác ph√¢n t√≠ch log.
MYSQL_PARSER_SCRIPT_PATH = os.path.join(ENGINE_DIR, "mysql_log_parser.py")

# T√™n file ch·ª©a th√¥ng tin metadata v·ªÅ l·∫ßn parse cu·ªëi c√πng (v√≠ d·ª•: th·ªùi gian c·∫≠p nh·∫≠t).
META_FILE_PATH = MYSQL_PARSER_SCRIPT_PATH + ".meta"

# T√™n file ch·ª©a tr·∫°ng th√°i c·ªßa parser (v√≠ d·ª•: v·ªã tr√≠ cu·ªëi c√πng ƒë√£ ƒë·ªçc trong file log).
MYSQL_STATE_FILE_PATH = os.path.join(LOGS_DIR, ".mysql_parser_state")


# --- ƒê∆∞·ªùng d·∫´n cho c√°c m√¥ h√¨nh AI v√† Feedback ---

# Th∆∞ m·ª•c ch√≠nh ƒë·ªÉ ch·ª©a t·∫•t c·∫£ c√°c m√¥ h√¨nh AI ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán.
MODELS_DIR = "trained_models"

# Th∆∞ m·ª•c con ƒë·ªÉ ch·ª©a c√°c m√¥ h√¨nh AI ƒë∆∞·ª£c hu·∫•n luy·ªán ri√™ng cho t·ª´ng ng∆∞·ªùi d√πng.
USER_MODELS_DIR = os.path.join(MODELS_DIR, "user_models")

# T√™n file CSV ƒë·ªÉ l∆∞u tr·ªØ c√°c ph·∫£n h·ªìi (feedback) t·ª´ ng∆∞·ªùi d√πng.
FEEDBACK_FILE_PATH = 'feedback.csv'

# T√™n file JSON ƒë·ªÉ l∆∞u danh s√°ch c√°c model AI ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.
VALID_MODELS_FILE_PATH = 'valid_models.json'


# ==============================================================================
# III. C·∫§U H√åNH C√ÅC LU·∫¨T PH√ÅT HI·ªÜN B·∫§T TH∆Ø·ªúNG
# ==============================================================================
# C√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c ng∆∞·ª°ng v√† tham s·ªë c·ªßa c√°c lu·∫≠t ph√¢n t√≠ch.

# --- LU·∫¨T 1: Truy v·∫•n Gi·ªù Khuya (Late Night Query) ---
LATE_NIGHT_START_TIME_DEFAULT = dt_time(0, 0)    # B·∫Øt ƒë·∫ßu t·ª´ 00:00 (n·ª≠a ƒë√™m)
LATE_NIGHT_END_TIME_DEFAULT = dt_time(5, 0)      # K·∫øt th√∫c tr∆∞·ªõc 05:00 s√°ng

# --- LU·∫¨T 2: K·∫øt xu·∫•t D·ªØ li·ªáu L·ªõn (Large Data Dump) ---
# Danh s√°ch c√°c t√™n b·∫£ng (vi·∫øt th∆∞·ªùng) ƒë∆∞·ª£c coi l√† c√≥ k√≠ch th∆∞·ªõc l·ªõn.
KNOWN_LARGE_TABLES_DEFAULT = [ 'customers', 'products', 'orders', 'order_items', 'test_log', 'another_table', 'sensitive_data' ]

# --- LU·∫¨T 3: Truy c·∫≠p Nhi·ªÅu B·∫£ng (Multiple Table Access) ---
TIME_WINDOW_DEFAULT_MINUTES = 5             # Khung th·ªùi gian ƒë·ªÉ x√©t m·ªôt session (ph√∫t).
MIN_DISTINCT_TABLES_THRESHOLD_DEFAULT = 3   # S·ªë l∆∞·ª£ng b·∫£ng ri√™ng bi·ªát t·ªëi thi·ªÉu ƒë·ªÉ b·ªã coi l√† b·∫•t th∆∞·ªùng.

# --- LU·∫¨T 4: Truy c·∫≠p B·∫£ng Nh·∫°y C·∫£m (Sensitive Table Access) ---
SENSITIVE_TABLES_DEFAULT = ['sensitive_data', 'customers', 'products'] 
ALLOWED_USERS_FOR_SENSITIVE_DEFAULT = ['root', 'db_admin', 'data_analyst_trusted']
SAFE_HOURS_START_DEFAULT = 8                # Gi·ªù l√†m vi·ªác an to√†n b·∫Øt ƒë·∫ßu t·ª´ 08:00
SAFE_HOURS_END_DEFAULT = 18                 # v√† k·∫øt th√∫c tr∆∞·ªõc 18:00.
SAFE_WEEKDAYS_DEFAULT = list(range(0, 5))   # Ng√†y l√†m vi·ªác an to√†n: 0=Th·ª© 2, ..., 4=Th·ª© 6.

# --- LU·∫¨T 5: Ho·∫°t ƒë·ªông User B·∫•t th∆∞·ªùng (Unusual User Activity) ---
# S·ª≠ d·ª•ng ph√¢n v·ªã (quantile) ƒë·ªÉ x√°c ƒë·ªãnh "gi·ªù ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng" c·ªßa m·ªói user.
QUANTILE_START_DEFAULT = 0.15               # M·ªëc 15% th·ªùi gian ho·∫°t ƒë·ªông s·ªõm nh·∫•t.
QUANTILE_END_DEFAULT = 0.85                 # M·ªëc 85% th·ªùi gian ho·∫°t ƒë·ªông mu·ªôn nh·∫•t.
MIN_QUERIES_FOR_PROFILE_DEFAULT = 10        # S·ªë l∆∞·ª£ng truy v·∫•n t·ªëi thi·ªÉu c·∫ßn c√≥ ƒë·ªÉ x√¢y d·ª±ng h·ªì s∆° h√†nh vi.


# ==============================================================================
# IV. C·∫§U H√åNH GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI)
# ==============================================================================
# C√°c h·∫±ng s·ªë v√† dictionary d√πng ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán.

# √Ånh x·∫° gi·ªØa t√™n hi·ªÉn th·ªã tr√™n UI v√† key n·ªôi b·ªô c·ªßa t·ª´ng lo·∫°i b·∫•t th∆∞·ªùng.
ANOMALY_TYPES_AVAILABLE = {
    "üïí Truy v·∫•n gi·ªù khuya": "late_night",
    "üíæ D·ªØ Li·ªáu L·ªõn": "dump",
    "üîó Nhi·ªÅu B·∫£ng": "multi_table",
    "üõ°Ô∏è Nh·∫°y C·∫£m": "sensitive",
    "üë§ Ho·∫°t ƒê·ªông B·∫•t Th∆∞·ªùng": "user_time",
    "ü§ñ ƒê·ªô Ph·ª©c T·∫°p (AI)": "complexity"
}

# √Ånh x·∫° t·ª´ t√™n c√°c ng√†y trong tu·∫ßn sang ch·ªâ s·ªë (index) c·ªßa Python (0-6).
DAYS_MAP = {
    "Th·ª© 2": 0, "Th·ª© 3": 1, "Th·ª© 4": 2, "Th·ª© 5": 3, 
    "Th·ª© 6": 4, "Th·ª© 7": 5, "Ch·ªß Nh·∫≠t": 6
}

# √Ånh x·∫° t·ª´ t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát sang t√™n ti·∫øng Anh (d√πng cho prompt LLM).
ANOMALY_TYPE_MAP = {
    "Truy V·∫•n Gi·ªù Khuya": "Late Night Query",
    "K·∫øt Xu·∫•t D·ªØ Li·ªáu L·ªõn": "Potential Data Dump",
    "Truy C·∫≠p Nhi·ªÅu B·∫£ng": "Multi-Table Access Session",
    "Truy C·∫≠p B·∫£ng Nh·∫°y c·∫£m": "Sensitive Table Access",
    "Ho·∫°t ƒê·ªông User B·∫•t Th∆∞·ªùng": "Unusual User Activity Window",
    "ƒê·ªô Ph·ª©c T·∫°p B·∫•t Th∆∞·ªùng (AI)": "Anomalous Complexity (AI Detection)"    
}

# √Ånh x·∫° t·ª´ key n·ªôi b·ªô c·ªßa lo·∫°i ph√¢n t√≠ch AI sang t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát.
AI_ANALYSIS_TYPE_MAP = {
    "Per-User Profile": "Theo H·ªì s∆° User",
    "Global Fallback": "Theo To√†n c·ª•c",
    "Supervised Feedback": "Theo Ph·∫£n h·ªìi",
    "Kh√¥ng ph√¢n t√≠ch": "Kh√¥ng ph√¢n t√≠ch"
}

# ==============================================================================
# V. C·∫§U H√åNH C√ÅC D·ªäCH V·ª§ NGO√ÄI V√Ä H·ªÜ TH·ªêNG
# ==============================================================================

# --- 1. C·∫•u h√¨nh Theo d√µi File (File Watcher) ---
# Th·ªùi gian (gi√¢y) m√† ·ª©ng d·ª•ng s·∫Ω ch·ªù gi·ªØa m·ªói l·∫ßn ki·ªÉm tra file log.
POLLING_TIME_WATCHER_SECONDS = 5

ENGINE_SLEEP_INTERVAL_SECONDS = 60

# --- 2. C·∫•u h√¨nh Server Ollama ---
DEFAULT_OLLAMA_HOST = 'http://localhost:11434'  # ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh c·ªßa server Ollama.
DEFAULT_OLLAMA_MODEL = 'seneca'                 # T√™n model m·∫∑c ƒë·ªãnh s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng.
OLLAMA_TIMEOUT_SECONDS = 3600                   # Th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y) khi g·ªçi AI (1 gi·ªù).

# --- 3. C·∫•u h√¨nh C·∫£nh b√°o qua Email ---
# ƒê·ªçc c√°c gi√° tr·ªã t·ª´ file .env ƒë√£ ƒë∆∞·ª£c load ·ªü ƒë·∫ßu file.
# os.getenv("KEY", "default_value") s·∫Ω l·∫•y gi√° tr·ªã c·ªßa bi·∫øn m√¥i tr∆∞·ªùng "KEY",
# n·∫øu kh√¥ng t√¨m th·∫•y, n√≥ s·∫Ω s·ª≠ d·ª•ng "default_value".
ALERT_EMAIL_SETTINGS = {
    # ƒê·ªãa ch·ªâ m√°y ch·ªß SMTP (v√≠ d·ª•: 'smtp.gmail.com').
    "smtp_server": os.getenv("SMTP_SERVER"),
    
    # C·ªïng SMTP (th∆∞·ªùng l√† 587 cho TLS ho·∫∑c 465 cho SSL).
    "smtp_port": os.getenv("SMTP_PORT"),
    
    # ƒê·ªãa ch·ªâ email ng∆∞·ªùi g·ª≠i.
    "sender_email": os.getenv("SENDER_EMAIL"),
    
    # M·∫≠t kh·∫©u ·ª©ng d·ª•ng c·ªßa email ng∆∞·ªùi g·ª≠i (kh√¥ng ph·∫£i m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p ch√≠nh).
    "sender_password": os.getenv("SENDER_PASSWORD"),
    
    # Danh s√°ch ng∆∞·ªùi nh·∫≠n ch√≠nh (To), ƒë∆∞·ª£c ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y trong file .env.
    # Code s·∫Ω t·ª± ƒë·ªông t√°ch chu·ªói, lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† c√°c email r·ªóng.
    "to_recipients": [email.strip() for email in os.getenv("TO_RECIPIENTS", "").split(",") if email.strip()],
    
    # Danh s√°ch ng∆∞·ªùi nh·∫≠n ·∫©n danh (BCC).
    "bcc_recipients": [email.strip() for email in os.getenv("BCC_RECIPIENTS", "").split(",") if email.strip()]
}